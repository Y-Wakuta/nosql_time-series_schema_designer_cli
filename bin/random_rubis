#!/usr/bin/env ruby

# Get and print the seed which is used
seed = ::Random.new_seed
$stderr.puts "SEED #{seed}"
::Random.srand seed

require 'nose'

# Record times for the longest running sets of methods
times = {
  indexes_for_workload: 0,
  query_costs: 0,
  update_costs: 0,
  setup_model: 0,
  solve: 0
}
NoSE::Timer.enable do |_cls, method, time|
  times[method] = time if times.key? method
end

factor = ARGV[0].to_i

# Create a random workload generator
network = NoSE::Random::WattsStrogatzNetwork.new(nodes_nb: 7 * factor)
workload = NoSE::Workload.new
network.entities.each { |entity| workload << entity }
sgen = NoSE::Random::StatementGenerator.new workload.model

# Add random queries
1.upto(30 * factor).each do |i|
  path_length = rand > 0.9 ? 2 : 1
  path_length = 3 if i <= factor

  r = rand
  conditions = if r > 0.95
                 3
               elsif r > 0.75
                 2
               else
                 1
               end
  q = sgen.random_query path_length,
                        3,
                        conditions,
                        rand > 0.9
  $stderr.puts q.unparse
  workload.add_statement q, 10
end

# Add random updates
1.upto(3 * factor).each do
  u = sgen.random_update 1, 2, 1
  $stderr.puts u.text
  workload.add_statement u
end

# Add random inserts
1.upto(5 * factor).each do
  i = sgen.random_insert
  $stderr.puts i.text
  workload.add_statement i
end

# Uncomment the lines below to enable profiling
# (along with the lines above to save the output)
# require 'ruby-prof'
# Parallel.instance_variable_set(:@processor_count, 0)
# RubyProf.start

# Execute NoSE for the random workload and report the time
start = Time.now.utc
indexes = NoSE::IndexEnumerator.new(workload).indexes_for_workload.to_a
search = NoSE::Search::Search.new(workload,
                                  NoSE::Cost::RequestCountCost.new)
search.search_overlap(indexes)
elapsed = Time.now.utc - start

# Output the timing values
total = 0
times[:costs] = times.delete(:query_costs) + times.delete(:update_costs)
times.each do |key, time|
  puts "#{key},#{time}"
  total += time
end
puts "other,#{elapsed - total}"

# Uncomment the lines below to save profile output
# (along with the lines above to enable profiling)
# result = RubyProf.stop
# result.eliminate_methods!([
#   /NoSE::Field#hash/,
#   /Range#/,
#   /Array#/,
#   /Set#/,
#   /Hash#/,
#   /Integer#downto/,
#   /Hashids#/,
#   /String#/,
#   /Enumerable#/,
#   /Integer#times/,
#   /Class#new/
# ])
# printer = RubyProf::CallTreePrinter.new(result)
# printer.print(File.open('prof.out', 'w'))
