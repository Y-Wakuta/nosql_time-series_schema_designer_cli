(eval):19: warning: constant ::FALSE is deprecated
(eval):45: warning: constant ::TRUE is deprecated
clearing keyspace: tpch
CREATE COLUMNFAMILY "i4165563175" ("orders_o_orderkey" uuid, "customer_c_custkey" uuid, "orders_o_orderdate" date, "orders_o_shippriority" int, "value_hash" text, PRIMARY KEY(("orders_o_orderkey"), "customer_c_custkey", value_hash));
CREATE COLUMNFAMILY "i2134332891" ("customer_c_custkey" uuid, "customer_c_mktsegment" text, "value_hash" text, PRIMARY KEY(("customer_c_custkey"), value_hash));
CREATE COLUMNFAMILY "i3709611601" ("customer_c_custkey" uuid, "nation_n_nationkey" uuid, "region_r_regionkey" uuid, "region_r_name" text, "nation_n_name" text, "value_hash" text, PRIMARY KEY(("customer_c_custkey"), "nation_n_nationkey", "region_r_regionkey", value_hash));
CREATE COLUMNFAMILY "i1564588052" ("orders_o_orderkey" uuid, "customer_c_custkey" uuid, "nation_n_nationkey" uuid, "region_r_regionkey" uuid, "region_r_name" text, "orders_o_orderdate" date, "nation_n_name" text, "value_hash" text, PRIMARY KEY(("orders_o_orderkey"), "customer_c_custkey", "nation_n_nationkey", "region_r_regionkey", value_hash));
CREATE COLUMNFAMILY "i2365186833" ("orders_o_orderkey" uuid, "nation_n_nationkey" uuid, "customer_c_custkey" uuid, "orders_o_orderdate" date, "customer_c_name" text, "customer_c_acctbal" float, "nation_n_name" text, "customer_c_address" text, "customer_c_phone" text, "customer_c_comment" text, "value_hash" text, PRIMARY KEY(("orders_o_orderkey"), "nation_n_nationkey", "customer_c_custkey", value_hash));
CREATE COLUMNFAMILY "i2920863803" ("customer_c_custkey" uuid, "nation_n_nationkey" uuid, "customer_c_name" text, "customer_c_acctbal" float, "nation_n_name" text, "customer_c_address" text, "customer_c_phone" text, "customer_c_comment" text, "value_hash" text, PRIMARY KEY(("customer_c_custkey"), "nation_n_nationkey", value_hash));
CREATE COLUMNFAMILY "i2532714025" ("partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "part_p_type" text, "value_hash" text, PRIMARY KEY(("partsupp_ps_partkey"), "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i3468441746" ("partsupp_ps_partkey" uuid, "partsupp_ps_supplycost" float, "value_hash" text, PRIMARY KEY(("partsupp_ps_partkey"), value_hash));
CREATE COLUMNFAMILY "i4088482648" ("lineitem_l_linenumber" uuid, "lineitem_l_returnflag" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "lineitem_l_shipdate" date, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), value_hash));
CREATE COLUMNFAMILY "i3076772946" ("lineitem_l_linenumber" uuid, "partsupp_ps_partkey" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "partsupp_ps_supplycost" float, "lineitem_l_quantity" float, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), "partsupp_ps_partkey", value_hash));
CREATE COLUMNFAMILY "i1891546182" ("lineitem_l_linenumber" uuid, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "part_p_type" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i662047096" ("region_r_name" text, "part_p_size" int, "part_p_type" text, "partsupp_ps_supplycost" float, "supplier_s_acctbal" float, "nation_n_name" text, "supplier_s_name" text, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "supplier_s_suppkey" uuid, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "part_p_mfgr" text, "supplier_s_address" text, "supplier_s_phone" text, "supplier_s_comment" text, "value_hash" text, PRIMARY KEY(("region_r_name"), "part_p_size", "part_p_type", "partsupp_ps_supplycost", "supplier_s_acctbal", "nation_n_name", "supplier_s_name", "region_r_regionkey", "nation_n_nationkey", "supplier_s_suppkey", "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i144261828" ("region_r_name" text, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "supplier_s_suppkey" uuid, "partsupp_ps_partkey" uuid, "partsupp_ps_supplycost" float, "value_hash" text, PRIMARY KEY(("region_r_name"), "region_r_regionkey", "nation_n_nationkey", "supplier_s_suppkey", "partsupp_ps_partkey", value_hash));
CREATE COLUMNFAMILY "i1726533611" ("customer_c_mktsegment" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "orders_o_orderdate" date, "customer_c_custkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_linenumber" uuid, "orders_o_shippriority" int, "lineitem_l_shipdate" date, "value_hash" text, PRIMARY KEY(("customer_c_mktsegment"), "lineitem_l_extendedprice", "lineitem_l_discount", "orders_o_orderdate", "customer_c_custkey", "orders_o_orderkey", "lineitem_l_linenumber", value_hash));
CREATE COLUMNFAMILY "i3435119087" ("region_r_name" text, "nation_n_name" text, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "value_hash" text, PRIMARY KEY(("region_r_name"), "nation_n_name", "region_r_regionkey", "nation_n_nationkey", value_hash));
CREATE COLUMNFAMILY "i1660232377" ("nation_n_nationkey" uuid, "orders_o_orderdate" date, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "customer_c_custkey" uuid, "lineitem_l_linenumber" uuid, "orders_o_orderkey" uuid, "value_hash" text, PRIMARY KEY(("nation_n_nationkey"), "orders_o_orderdate", "lineitem_l_extendedprice", "lineitem_l_discount", "customer_c_custkey", "lineitem_l_linenumber", "orders_o_orderkey", value_hash));
CREATE COLUMNFAMILY "i1327449593" ("nation_n_name" text, "lineitem_l_shipdate" date, "nation_n_nationkey" uuid, "customer_c_custkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_linenumber" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "value_hash" text, PRIMARY KEY(("nation_n_name"), "lineitem_l_shipdate", "nation_n_nationkey", "customer_c_custkey", "orders_o_orderkey", "lineitem_l_linenumber", value_hash));
CREATE COLUMNFAMILY "i2386081023" ("region_r_name" text, "nation_n_name" text, "part_p_type" text, "orders_o_orderdate" date, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "customer_c_custkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_linenumber" uuid, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "value_hash" text, PRIMARY KEY(("region_r_name"), "nation_n_name", "part_p_type", "orders_o_orderdate", "region_r_regionkey", "nation_n_nationkey", "customer_c_custkey", "orders_o_orderkey", "lineitem_l_linenumber", "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i2588666510" ("part_p_name" text, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "value_hash" text, PRIMARY KEY(("part_p_name"), "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i3670917302" ("partsupp_ps_partkey" uuid, "nation_n_name" text, "orders_o_orderdate" date, "customer_c_custkey" uuid, "lineitem_l_linenumber" uuid, "nation_n_nationkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "partsupp_ps_supplycost" float, "lineitem_l_quantity" float, "value_hash" text, PRIMARY KEY(("partsupp_ps_partkey"), "nation_n_name", "orders_o_orderdate", "customer_c_custkey", "lineitem_l_linenumber", "nation_n_nationkey", "orders_o_orderkey", value_hash));
CREATE COLUMNFAMILY "i1394347799" ("lineitem_l_returnflag" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "orders_o_orderdate" date, "lineitem_l_linenumber" uuid, "orders_o_orderkey" uuid, "customer_c_custkey" uuid, "nation_n_nationkey" uuid, "customer_c_name" text, "customer_c_acctbal" float, "nation_n_name" text, "customer_c_address" text, "customer_c_phone" text, "customer_c_comment" text, "value_hash" text, PRIMARY KEY(("lineitem_l_returnflag"), "lineitem_l_extendedprice", "lineitem_l_discount", "orders_o_orderdate", "lineitem_l_linenumber", "orders_o_orderkey", "customer_c_custkey", "nation_n_nationkey", value_hash));
 INFO  nose::loader::mysqlloader : i4165563175 [orders.o_orderkey] [customer.c_custkey] → [orders.o_orderdate, orders.o_shippriority]  $48 Graph(nodes: orders, customer, edges: {orders=>#<Set: {orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>})
SELECT DISTINCT orders.o_orderkey AS orders_o_orderkey, customer.c_custkey AS customer_c_custkey, orders.o_orderdate AS orders_o_orderdate, orders.o_shippriority AS orders_o_shippriority FROM orders JOIN customer WHERE orders.o_custkey=customer.c_custkey
query time: 0.226217431 for i4165563175
== start inserting : i4165563175, 60142
insert through csv: i4165563175, /tmp/d20201110-19389-feplo9/i4165563175.csv, 60142

 count
-------
 60142

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 12.898826406 for 60142 records
 INFO  nose::loader::mysqlloader : i2134332891 [customer.c_custkey] [] → [customer.c_mktsegment]  $26 Graph(nodes: customer, edges: {})
SELECT DISTINCT customer.c_custkey AS customer_c_custkey, customer.c_mktsegment AS customer_c_mktsegment FROM customer
query time: 0.033579479 for i2134332891
== start inserting : i2134332891, 30000
insert through csv: i2134332891, /tmp/d20201110-19389-h1jv6h/i2134332891.csv, 30000

 count
-------
 30000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 11.888897414 for 30000 records
 INFO  nose::loader::mysqlloader : i3709611601 [customer.c_custkey] [nation.n_nationkey, region.r_regionkey] → [region.r_name, nation.n_name]  $68 Graph(nodes: customer, nation, region, edges: {customer=>#<Set: {customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, region.r_regionkey AS region_r_regionkey, region.r_name AS region_r_name, nation.n_name AS nation_n_name FROM customer JOIN nation JOIN region WHERE customer.c_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.057771998 for i3709611601
== start inserting : i3709611601, 30000
insert through csv: i3709611601, /tmp/d20201110-19389-m8pp7r/i3709611601.csv, 30000

 count
-------
 30000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 12.404011129 for 30000 records
 INFO  nose::loader::mysqlloader : i1564588052 [orders.o_orderkey] [customer.c_custkey, nation.n_nationkey, region.r_regionkey] → [region.r_name, orders.o_orderdate, nation.n_name]  $92 Graph(nodes: orders, customer, nation, region, edges: {orders=>#<Set: {orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT orders.o_orderkey AS orders_o_orderkey, customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, region.r_regionkey AS region_r_regionkey, region.r_name AS region_r_name, orders.o_orderdate AS orders_o_orderdate, nation.n_name AS nation_n_name FROM orders JOIN customer JOIN nation JOIN region WHERE orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.15116043 for i1564588052
== start inserting : i1564588052, 60142
insert through csv: i1564588052, /tmp/d20201110-19389-1s5ncxv/i1564588052.csv, 60142

 count
-------
 60142

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 13.425702752 for 60142 records
 INFO  nose::loader::mysqlloader : i2365186833 [orders.o_orderkey] [nation.n_nationkey, customer.c_custkey] → [orders.o_orderdate, customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $114 Graph(nodes: orders, customer, nation, edges: {orders=>#<Set: {orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT orders.o_orderkey AS orders_o_orderkey, nation.n_nationkey AS nation_n_nationkey, customer.c_custkey AS customer_c_custkey, orders.o_orderdate AS orders_o_orderdate, customer.c_name AS customer_c_name, customer.c_acctbal AS customer_c_acctbal, nation.n_name AS nation_n_name, customer.c_address AS customer_c_address, customer.c_phone AS customer_c_phone, customer.c_comment AS customer_c_comment FROM orders JOIN customer JOIN nation WHERE orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 0.237441291 for i2365186833
== start inserting : i2365186833, 60142
insert through csv: i2365186833, /tmp/d20201110-19389-19e30ae/i2365186833.csv, 60142

 count
-------
 60142

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 13.9559396 for 60142 records
 INFO  nose::loader::mysqlloader : i2920863803 [customer.c_custkey] [nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $90 Graph(nodes: customer, nation, edges: {customer=>#<Set: {customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, customer.c_name AS customer_c_name, customer.c_acctbal AS customer_c_acctbal, nation.n_name AS nation_n_name, customer.c_address AS customer_c_address, customer.c_phone AS customer_c_phone, customer.c_comment AS customer_c_comment FROM customer JOIN nation WHERE customer.c_nationkey=nation.n_nationkey
query time: 0.105174007 for i2920863803
== start inserting : i2920863803, 30000
insert through csv: i2920863803, /tmp/d20201110-19389-27zo3v/i2920863803.csv, 30000

 count
-------
 30000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 12.456026092 for 30000 records
 INFO  nose::loader::mysqlloader : i2532714025 [partsupp.ps_partkey] [part.p_partkey] → [part.p_type]  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>})
SELECT DISTINCT partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, part.p_type AS part_p_type FROM partsupp JOIN part WHERE partsupp.ps_partkey=part.p_partkey
query time: 1.124974062 for i2532714025
== start inserting : i2532714025, 200000
insert through csv: i2532714025, /tmp/d20201110-19389-1pjbwif/i2532714025.csv, 200000

 count
--------
 200000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 16.821523917 for 200000 records
 INFO  nose::loader::mysqlloader : i3468441746 [partsupp.ps_partkey] [] → [partsupp.ps_supplycost]  $24 Graph(nodes: partsupp, edges: {})
SELECT DISTINCT partsupp.ps_partkey AS partsupp_ps_partkey, partsupp.ps_supplycost AS partsupp_ps_supplycost FROM partsupp
query time: 0.784513818 for i3468441746
== start inserting : i3468441746, 799986
insert through csv: i3468441746, /tmp/d20201110-19389-1s1fs0l/i3468441746.csv, 799986

 count
--------
 799986

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 29.419235026 for 799986 records
 INFO  nose::loader::mysqlloader : i4088482648 [lineitem.l_linenumber] [] → [lineitem.l_returnflag, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_shipdate]  $50 Graph(nodes: lineitem, edges: {})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, lineitem.l_returnflag AS lineitem_l_returnflag, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, lineitem.l_shipdate AS lineitem_l_shipdate FROM lineitem
query time: 2.08235394 for i4088482648
== start inserting : i4088482648, 1200243
insert through csv: i4088482648, /tmp/d20201110-19389-1gvjki4/i4088482648.csv, 1200243
<stdin>:1:ReadTimeout: Error from server: code=1200 [Coordinator node timed out waiting for replica nodes' responses] message="Operation timed out - received only 0 responses." info={'received_responses': 0, 'required_responses': 1, 'consistency': 'ONE'}

loading through csv time: 46.348996588 for 1200243 records
 INFO  nose::loader::mysqlloader : i3076772946 [lineitem.l_linenumber] [partsupp.ps_partkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $64 Graph(nodes: partsupp, lineitem, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey}>})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, partsupp.ps_partkey AS partsupp_ps_partkey, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, partsupp.ps_supplycost AS partsupp_ps_supplycost, lineitem.l_quantity AS lineitem_l_quantity FROM partsupp JOIN lineitem WHERE lineitem.l_suppkey=partsupp.ps_partkey
query time: 8.221341333 for i3076772946
== start inserting : i3076772946, 4800718
insert through csv: i3076772946, /tmp/d20201110-19389-5mve58/i3076772946.csv, 4800718
<stdin>:1:ReadTimeout: Error from server: code=1200 [Coordinator node timed out waiting for replica nodes' responses] message="Operation timed out - received only 1 responses." info={'received_responses': 1, 'required_responses': 1, 'consistency': 'ONE'}

loading through csv time: 156.487923934 for 4800718 records
 INFO  nose::loader::mysqlloader : i1891546182 [lineitem.l_linenumber] [partsupp.ps_partkey, part.p_partkey] → [part.p_type, lineitem.l_extendedprice, lineitem.l_discount]  $74 Graph(nodes: part, partsupp, lineitem, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey}>})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, part.p_type AS part_p_type, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount FROM part JOIN partsupp JOIN lineitem WHERE partsupp.ps_partkey=part.p_partkey AND lineitem.l_suppkey=partsupp.ps_partkey
query time: 8.397481779 for i1891546182
== start inserting : i1891546182, 1200243
insert through csv: i1891546182, /tmp/d20201110-19389-ix7d1a/i1891546182.csv, 1200243
<stdin>:1:ReadTimeout: Error from server: code=1200 [Coordinator node timed out waiting for replica nodes' responses] message="Operation timed out - received only 0 responses." info={'received_responses': 0, 'required_responses': 1, 'consistency': 'ONE'}

loading through csv time: 49.035132674 for 1200243 records
 INFO  nose::loader::mysqlloader : i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, part.p_size AS part_p_size, part.p_type AS part_p_type, partsupp.ps_supplycost AS partsupp_ps_supplycost, supplier.s_acctbal AS supplier_s_acctbal, nation.n_name AS nation_n_name, supplier.s_name AS supplier_s_name, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey, supplier.s_suppkey AS supplier_s_suppkey, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, part.p_mfgr AS part_p_mfgr, supplier.s_address AS supplier_s_address, supplier.s_phone AS supplier_s_phone, supplier.s_comment AS supplier_s_comment FROM part JOIN partsupp JOIN supplier JOIN nation JOIN region WHERE partsupp.ps_partkey=part.p_partkey AND partsupp.ps_suppkey=supplier.s_suppkey AND supplier.s_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.863989368 for i662047096
== start inserting : i662047096, 160000
insert through csv: i662047096, /tmp/d20201110-19389-19d2e20/i662047096.csv, 160000

 count
--------
 160000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 19.168496917 for 160000 records
 INFO  nose::loader::mysqlloader : i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey, supplier.s_suppkey AS supplier_s_suppkey, partsupp.ps_partkey AS partsupp_ps_partkey, partsupp.ps_supplycost AS partsupp_ps_supplycost FROM partsupp JOIN supplier JOIN nation JOIN region WHERE partsupp.ps_suppkey=supplier.s_suppkey AND supplier.s_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.353420383 for i144261828
== start inserting : i144261828, 160000
insert through csv: i144261828, /tmp/d20201110-19389-13c3f5r/i144261828.csv, 160000

 count
--------
 160000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 15.51367848 for 160000 records
 INFO  nose::loader::mysqlloader : i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>})
SELECT DISTINCT customer.c_mktsegment AS customer_c_mktsegment, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, orders.o_orderdate AS orders_o_orderdate, customer.c_custkey AS customer_c_custkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_linenumber AS lineitem_l_linenumber, orders.o_shippriority AS orders_o_shippriority, lineitem.l_shipdate AS lineitem_l_shipdate FROM lineitem JOIN orders JOIN customer WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey
query time: 1.65123598 for i1726533611
== start inserting : i1726533611, 240235
insert through csv: i1726533611, /tmp/d20201110-19389-1osls6/i1726533611.csv, 240235

 count
--------
 240235

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 20.010562343 for 240235 records
 INFO  nose::loader::mysqlloader : i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, nation.n_name AS nation_n_name, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey FROM nation JOIN region WHERE nation.n_regionkey=region.r_regionkey
query time: 0.001440075 for i3435119087
== start inserting : i3435119087, 25
insert through csv: i3435119087, /tmp/d20201110-19389-vlpaaq/i3435119087.csv, 25

 count
-------
    25

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 11.187214071 for 25 records
 INFO  nose::loader::mysqlloader : i1660232377 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT nation.n_nationkey AS nation_n_nationkey, orders.o_orderdate AS orders_o_orderdate, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, customer.c_custkey AS customer_c_custkey, lineitem.l_linenumber AS lineitem_l_linenumber, orders.o_orderkey AS orders_o_orderkey FROM lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 1.441062293 for i1660232377
== start inserting : i1660232377, 240235
insert through csv: i1660232377, /tmp/d20201110-19389-1hpq18i/i1660232377.csv, 240235

 count
--------
 240235

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 19.902277894 for 240235 records
 INFO  nose::loader::mysqlloader : i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT nation.n_name AS nation_n_name, lineitem.l_shipdate AS lineitem_l_shipdate, nation.n_nationkey AS nation_n_nationkey, customer.c_custkey AS customer_c_custkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_linenumber AS lineitem_l_linenumber, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount FROM lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 1.483394776 for i1327449593
== start inserting : i1327449593, 240235
insert through csv: i1327449593, /tmp/d20201110-19389-1olda3w/i1327449593.csv, 240235

 count
--------
 240235

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 20.639754421 for 240235 records
 INFO  nose::loader::mysqlloader : i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, nation.n_name AS nation_n_name, part.p_type AS part_p_type, orders.o_orderdate AS orders_o_orderdate, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey, customer.c_custkey AS customer_c_custkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_linenumber AS lineitem_l_linenumber, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount FROM part JOIN partsupp JOIN lineitem JOIN orders JOIN customer JOIN nation JOIN region WHERE partsupp.ps_partkey=part.p_partkey AND lineitem.l_suppkey=partsupp.ps_partkey AND lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 4.65660684 for i2386081023
== start inserting : i2386081023, 240235
insert through csv: i2386081023, /tmp/d20201110-19389-birbhn/i2386081023.csv, 240235

 count
--------
 240235

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 23.85829596 for 240235 records
 INFO  nose::loader::mysqlloader : i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>})
SELECT DISTINCT part.p_name AS part_p_name, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey FROM partsupp JOIN part WHERE partsupp.ps_partkey=part.p_partkey
query time: 0.981745583 for i2588666510
== start inserting : i2588666510, 200000
insert through csv: i2588666510, /tmp/d20201110-19389-h4ngh4/i2588666510.csv, 200000

 count
--------
 200000

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 16.475305936 for 200000 records
 INFO  nose::loader::mysqlloader : i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT partsupp.ps_partkey AS partsupp_ps_partkey, nation.n_name AS nation_n_name, orders.o_orderdate AS orders_o_orderdate, customer.c_custkey AS customer_c_custkey, lineitem.l_linenumber AS lineitem_l_linenumber, nation.n_nationkey AS nation_n_nationkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, partsupp.ps_supplycost AS partsupp_ps_supplycost, lineitem.l_quantity AS lineitem_l_quantity FROM partsupp JOIN lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_suppkey=partsupp.ps_partkey AND lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 3.630241092 for i3670917302
== start inserting : i3670917302, 960891
insert through csv: i3670917302, /tmp/d20201110-19389-t0v4z1/i3670917302.csv, 960891
<stdin>:1:ReadTimeout: Error from server: code=1200 [Coordinator node timed out waiting for replica nodes' responses] message="Operation timed out - received only 0 responses." info={'received_responses': 0, 'required_responses': 1, 'consistency': 'ONE'}

loading through csv time: 54.874214297 for 960891 records
 INFO  nose::loader::mysqlloader : i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT lineitem.l_returnflag AS lineitem_l_returnflag, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, orders.o_orderdate AS orders_o_orderdate, lineitem.l_linenumber AS lineitem_l_linenumber, orders.o_orderkey AS orders_o_orderkey, customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, customer.c_name AS customer_c_name, customer.c_acctbal AS customer_c_acctbal, nation.n_name AS nation_n_name, customer.c_address AS customer_c_address, customer.c_phone AS customer_c_phone, customer.c_comment AS customer_c_comment FROM lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 1.829741075 for i1394347799
== start inserting : i1394347799, 240235
insert through csv: i1394347799, /tmp/d20201110-19389-14nn22r/i1394347799.csv, 240235

 count
--------
 240235

(1 rows)

Warnings :
Aggregation query used without partition key

loading through csv time: 23.6908891 for 240235 records
whole loading time: 829.903466082
[33m timestep: 0 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i1660232377 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 1 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i1660232377 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 2 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i1660232377 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 3 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i1660232377 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 4 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i1660232377 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
