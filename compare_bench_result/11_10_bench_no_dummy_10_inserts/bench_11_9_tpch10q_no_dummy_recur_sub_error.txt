(eval):19: warning: constant ::FALSE is deprecated
(eval):45: warning: constant ::TRUE is deprecated
clearing keyspace: tpch
CREATE COLUMNFAMILY "i4165563175" ("orders_o_orderkey" uuid, "customer_c_custkey" uuid, "orders_o_orderdate" date, "orders_o_shippriority" int, "value_hash" text, PRIMARY KEY(("orders_o_orderkey"), "customer_c_custkey", value_hash));
CREATE COLUMNFAMILY "i2134332891" ("customer_c_custkey" uuid, "customer_c_mktsegment" text, "value_hash" text, PRIMARY KEY(("customer_c_custkey"), value_hash));
CREATE COLUMNFAMILY "i3709611601" ("customer_c_custkey" uuid, "nation_n_nationkey" uuid, "region_r_regionkey" uuid, "region_r_name" text, "nation_n_name" text, "value_hash" text, PRIMARY KEY(("customer_c_custkey"), "nation_n_nationkey", "region_r_regionkey", value_hash));
CREATE COLUMNFAMILY "i2556003203" ("orders_o_orderkey" uuid, "nation_n_nationkey" uuid, "customer_c_custkey" uuid, "region_r_regionkey" uuid, "region_r_name" text, "orders_o_orderdate" date, "nation_n_name" text, "value_hash" text, PRIMARY KEY(("orders_o_orderkey"), "nation_n_nationkey", "customer_c_custkey", "region_r_regionkey", value_hash));
CREATE COLUMNFAMILY "i4039402762" ("orders_o_orderkey" uuid, "customer_c_custkey" uuid, "nation_n_nationkey" uuid, "orders_o_orderdate" date, "customer_c_name" text, "customer_c_acctbal" float, "nation_n_name" text, "customer_c_address" text, "customer_c_phone" text, "customer_c_comment" text, "value_hash" text, PRIMARY KEY(("orders_o_orderkey"), "customer_c_custkey", "nation_n_nationkey", value_hash));
CREATE COLUMNFAMILY "i2920863803" ("customer_c_custkey" uuid, "nation_n_nationkey" uuid, "customer_c_name" text, "customer_c_acctbal" float, "nation_n_name" text, "customer_c_address" text, "customer_c_phone" text, "customer_c_comment" text, "value_hash" text, PRIMARY KEY(("customer_c_custkey"), "nation_n_nationkey", value_hash));
CREATE COLUMNFAMILY "i1570326625" ("partsupp_ps_partkey" uuid, "part_p_type" text, "part_p_partkey" uuid, "value_hash" text, PRIMARY KEY(("partsupp_ps_partkey"), "part_p_type", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i3310665277" ("partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "part_p_name" text, "partsupp_ps_supplycost" float, "value_hash" text, PRIMARY KEY(("partsupp_ps_partkey"), "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i3468441746" ("partsupp_ps_partkey" uuid, "partsupp_ps_supplycost" float, "value_hash" text, PRIMARY KEY(("partsupp_ps_partkey"), value_hash));
CREATE COLUMNFAMILY "i4088482648" ("lineitem_l_linenumber" uuid, "lineitem_l_returnflag" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "lineitem_l_shipdate" date, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), value_hash));
CREATE COLUMNFAMILY "i3076772946" ("lineitem_l_linenumber" uuid, "partsupp_ps_partkey" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "partsupp_ps_supplycost" float, "lineitem_l_quantity" float, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), "partsupp_ps_partkey", value_hash));
CREATE COLUMNFAMILY "i2511103335" ("lineitem_l_linenumber" uuid, "part_p_partkey" uuid, "partsupp_ps_partkey" uuid, "part_p_type" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), "part_p_partkey", "partsupp_ps_partkey", value_hash));
CREATE COLUMNFAMILY "i1763256478" ("lineitem_l_linenumber" uuid, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "part_p_name" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "partsupp_ps_supplycost" float, "lineitem_l_quantity" float, "value_hash" text, PRIMARY KEY(("lineitem_l_linenumber"), "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i662047096" ("region_r_name" text, "part_p_size" int, "part_p_type" text, "partsupp_ps_supplycost" float, "supplier_s_acctbal" float, "nation_n_name" text, "supplier_s_name" text, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "supplier_s_suppkey" uuid, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "part_p_mfgr" text, "supplier_s_address" text, "supplier_s_phone" text, "supplier_s_comment" text, "value_hash" text, PRIMARY KEY(("region_r_name"), "part_p_size", "part_p_type", "partsupp_ps_supplycost", "supplier_s_acctbal", "nation_n_name", "supplier_s_name", "region_r_regionkey", "nation_n_nationkey", "supplier_s_suppkey", "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i144261828" ("region_r_name" text, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "supplier_s_suppkey" uuid, "partsupp_ps_partkey" uuid, "partsupp_ps_supplycost" float, "value_hash" text, PRIMARY KEY(("region_r_name"), "region_r_regionkey", "nation_n_nationkey", "supplier_s_suppkey", "partsupp_ps_partkey", value_hash));
CREATE COLUMNFAMILY "i1726533611" ("customer_c_mktsegment" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "orders_o_orderdate" date, "customer_c_custkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_linenumber" uuid, "orders_o_shippriority" int, "lineitem_l_shipdate" date, "value_hash" text, PRIMARY KEY(("customer_c_mktsegment"), "lineitem_l_extendedprice", "lineitem_l_discount", "orders_o_orderdate", "customer_c_custkey", "orders_o_orderkey", "lineitem_l_linenumber", value_hash));
CREATE COLUMNFAMILY "i3435119087" ("region_r_name" text, "nation_n_name" text, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "value_hash" text, PRIMARY KEY(("region_r_name"), "nation_n_name", "region_r_regionkey", "nation_n_nationkey", value_hash));
CREATE COLUMNFAMILY "i2634107645" ("nation_n_nationkey" uuid, "orders_o_orderdate" date, "lineitem_l_discount" float, "lineitem_l_extendedprice" float, "customer_c_custkey" uuid, "lineitem_l_linenumber" uuid, "orders_o_orderkey" uuid, "value_hash" text, PRIMARY KEY(("nation_n_nationkey"), "orders_o_orderdate", "lineitem_l_discount", "lineitem_l_extendedprice", "customer_c_custkey", "lineitem_l_linenumber", "orders_o_orderkey", value_hash));
CREATE COLUMNFAMILY "i1327449593" ("nation_n_name" text, "lineitem_l_shipdate" date, "nation_n_nationkey" uuid, "customer_c_custkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_linenumber" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "value_hash" text, PRIMARY KEY(("nation_n_name"), "lineitem_l_shipdate", "nation_n_nationkey", "customer_c_custkey", "orders_o_orderkey", "lineitem_l_linenumber", value_hash));
CREATE COLUMNFAMILY "i2386081023" ("region_r_name" text, "nation_n_name" text, "part_p_type" text, "orders_o_orderdate" date, "region_r_regionkey" uuid, "nation_n_nationkey" uuid, "customer_c_custkey" uuid, "orders_o_orderkey" uuid, "lineitem_l_linenumber" uuid, "partsupp_ps_partkey" uuid, "part_p_partkey" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "value_hash" text, PRIMARY KEY(("region_r_name"), "nation_n_name", "part_p_type", "orders_o_orderdate", "region_r_regionkey", "nation_n_nationkey", "customer_c_custkey", "orders_o_orderkey", "lineitem_l_linenumber", "partsupp_ps_partkey", "part_p_partkey", value_hash));
CREATE COLUMNFAMILY "i1400082724" ("part_p_name" text, "orders_o_orderkey" uuid, "nation_n_name" text, "orders_o_orderdate" date, "part_p_partkey" uuid, "partsupp_ps_partkey" uuid, "lineitem_l_linenumber" uuid, "customer_c_custkey" uuid, "nation_n_nationkey" uuid, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "partsupp_ps_supplycost" float, "lineitem_l_quantity" float, "value_hash" text, PRIMARY KEY(("part_p_name"), "orders_o_orderkey", "nation_n_name", "orders_o_orderdate", "part_p_partkey", "partsupp_ps_partkey", "lineitem_l_linenumber", "customer_c_custkey", "nation_n_nationkey", value_hash));
CREATE COLUMNFAMILY "i1394347799" ("lineitem_l_returnflag" text, "lineitem_l_extendedprice" float, "lineitem_l_discount" float, "orders_o_orderdate" date, "lineitem_l_linenumber" uuid, "orders_o_orderkey" uuid, "customer_c_custkey" uuid, "nation_n_nationkey" uuid, "customer_c_name" text, "customer_c_acctbal" float, "nation_n_name" text, "customer_c_address" text, "customer_c_phone" text, "customer_c_comment" text, "value_hash" text, PRIMARY KEY(("lineitem_l_returnflag"), "lineitem_l_extendedprice", "lineitem_l_discount", "orders_o_orderdate", "lineitem_l_linenumber", "orders_o_orderkey", "customer_c_custkey", "nation_n_nationkey", value_hash));
 INFO  nose::loader::mysqlloader : i4165563175 [orders.o_orderkey] [customer.c_custkey] → [orders.o_orderdate, orders.o_shippriority]  $48 Graph(nodes: orders, customer, edges: {orders=>#<Set: {orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>})
SELECT DISTINCT orders.o_orderkey AS orders_o_orderkey, customer.c_custkey AS customer_c_custkey, orders.o_orderdate AS orders_o_orderdate, orders.o_shippriority AS orders_o_shippriority FROM orders JOIN customer WHERE orders.o_custkey=customer.c_custkey
query time: 0.072263193 for i4165563175
== start inserting : i4165563175, 575
insert through csv: i4165563175, /tmp/d20201111-19113-z0ydht/i4165563175_0.csv, 575
loading through csv time: 0.808782233 for 575 records
 INFO  nose::loader::mysqlloader : i2134332891 [customer.c_custkey] [] → [customer.c_mktsegment]  $26 Graph(nodes: customer, edges: {})
SELECT DISTINCT customer.c_custkey AS customer_c_custkey, customer.c_mktsegment AS customer_c_mktsegment FROM customer
query time: 0.011746103 for i2134332891
== start inserting : i2134332891, 3000
insert through csv: i2134332891, /tmp/d20201111-19113-k8mvs3/i2134332891_0.csv, 3000
loading through csv time: 0.728738505 for 3000 records
 INFO  nose::loader::mysqlloader : i3709611601 [customer.c_custkey] [nation.n_nationkey, region.r_regionkey] → [region.r_name, nation.n_name]  $68 Graph(nodes: customer, nation, region, edges: {customer=>#<Set: {customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, region.r_regionkey AS region_r_regionkey, region.r_name AS region_r_name, nation.n_name AS nation_n_name FROM customer JOIN nation JOIN region WHERE customer.c_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.015319398 for i3709611601
== start inserting : i3709611601, 3000
insert through csv: i3709611601, /tmp/d20201111-19113-xkg2pb/i3709611601_0.csv, 3000
loading through csv time: 0.841176417 for 3000 records
 INFO  nose::loader::mysqlloader : i2556003203 [orders.o_orderkey] [nation.n_nationkey, customer.c_custkey, region.r_regionkey] → [region.r_name, orders.o_orderdate, nation.n_name]  $92 Graph(nodes: orders, customer, nation, region, edges: {orders=>#<Set: {orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT orders.o_orderkey AS orders_o_orderkey, nation.n_nationkey AS nation_n_nationkey, customer.c_custkey AS customer_c_custkey, region.r_regionkey AS region_r_regionkey, region.r_name AS region_r_name, orders.o_orderdate AS orders_o_orderdate, nation.n_name AS nation_n_name FROM orders JOIN customer JOIN nation JOIN region WHERE orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.007302139 for i2556003203
== start inserting : i2556003203, 575
insert through csv: i2556003203, /tmp/d20201111-19113-1dpp8s7/i2556003203_0.csv, 575
loading through csv time: 0.774812542 for 575 records
 INFO  nose::loader::mysqlloader : i4039402762 [orders.o_orderkey] [customer.c_custkey, nation.n_nationkey] → [orders.o_orderdate, customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $114 Graph(nodes: orders, customer, nation, edges: {orders=>#<Set: {orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT orders.o_orderkey AS orders_o_orderkey, customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, orders.o_orderdate AS orders_o_orderdate, customer.c_name AS customer_c_name, customer.c_acctbal AS customer_c_acctbal, nation.n_name AS nation_n_name, customer.c_address AS customer_c_address, customer.c_phone AS customer_c_phone, customer.c_comment AS customer_c_comment FROM orders JOIN customer JOIN nation WHERE orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 0.008394711 for i4039402762
== start inserting : i4039402762, 575
insert through csv: i4039402762, /tmp/d20201111-19113-5odxm6/i4039402762_0.csv, 575
loading through csv time: 0.810742952 for 575 records
 INFO  nose::loader::mysqlloader : i2920863803 [customer.c_custkey] [nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $90 Graph(nodes: customer, nation, edges: {customer=>#<Set: {customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, customer.c_name AS customer_c_name, customer.c_acctbal AS customer_c_acctbal, nation.n_name AS nation_n_name, customer.c_address AS customer_c_address, customer.c_phone AS customer_c_phone, customer.c_comment AS customer_c_comment FROM customer JOIN nation WHERE customer.c_nationkey=nation.n_nationkey
query time: 0.011571305 for i2920863803
== start inserting : i2920863803, 3000
insert through csv: i2920863803, /tmp/d20201111-19113-1tjyoei/i2920863803_0.csv, 3000
loading through csv time: 0.777644912 for 3000 records
 INFO  nose::loader::mysqlloader : i1570326625 [partsupp.ps_partkey] [part.p_type, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>})
SELECT DISTINCT partsupp.ps_partkey AS partsupp_ps_partkey, part.p_type AS part_p_type, part.p_partkey AS part_p_partkey FROM partsupp JOIN part WHERE partsupp.ps_partkey=part.p_partkey
query time: 0.949944726 for i1570326625
== start inserting : i1570326625, 200000
insert through csv: i1570326625, /tmp/d20201111-19113-c9tk0z/i1570326625_0.csv, 200000
loading through csv time: 3.60350216 for 200000 records
 INFO  nose::loader::mysqlloader : i3310665277 [partsupp.ps_partkey] [part.p_partkey] → [part.p_name, partsupp.ps_supplycost]  $50 Graph(nodes: part, partsupp, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>})
SELECT DISTINCT partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, part.p_name AS part_p_name, partsupp.ps_supplycost AS partsupp_ps_supplycost FROM part JOIN partsupp WHERE partsupp.ps_partkey=part.p_partkey
query time: 1.231217067 for i3310665277
== start inserting : i3310665277, 799986
insert through csv: i3310665277, /tmp/d20201111-19113-1fpejua/i3310665277_0.csv, 799986
loading through csv time: 15.735482372 for 799986 records
 INFO  nose::loader::mysqlloader : i3468441746 [partsupp.ps_partkey] [] → [partsupp.ps_supplycost]  $24 Graph(nodes: partsupp, edges: {})
SELECT DISTINCT partsupp.ps_partkey AS partsupp_ps_partkey, partsupp.ps_supplycost AS partsupp_ps_supplycost FROM partsupp
query time: 0.820939977 for i3468441746
== start inserting : i3468441746, 799986
insert through csv: i3468441746, /tmp/d20201111-19113-942jlq/i3468441746_0.csv, 799986
loading through csv time: 13.01234782 for 799986 records
 INFO  nose::loader::mysqlloader : i4088482648 [lineitem.l_linenumber] [] → [lineitem.l_returnflag, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_shipdate]  $50 Graph(nodes: lineitem, edges: {})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, lineitem.l_returnflag AS lineitem_l_returnflag, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, lineitem.l_shipdate AS lineitem_l_shipdate FROM lineitem
query time: 0.962902111 for i4088482648
== start inserting : i4088482648, 30006
insert through csv: i4088482648, /tmp/d20201111-19113-17vx7e5/i4088482648_0.csv, 30006
loading through csv time: 1.48286423 for 30006 records
 INFO  nose::loader::mysqlloader : i3076772946 [lineitem.l_linenumber] [partsupp.ps_partkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $64 Graph(nodes: partsupp, lineitem, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey}>})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, partsupp.ps_partkey AS partsupp_ps_partkey, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, partsupp.ps_supplycost AS partsupp_ps_supplycost, lineitem.l_quantity AS lineitem_l_quantity FROM partsupp JOIN lineitem WHERE lineitem.l_suppkey=partsupp.ps_partkey
query time: 0.859560286 for i3076772946
== start inserting : i3076772946, 120020
insert through csv: i3076772946, /tmp/d20201111-19113-d4qf9y/i3076772946_0.csv, 120020
loading through csv time: 3.588372924 for 120020 records
 INFO  nose::loader::mysqlloader : i2511103335 [lineitem.l_linenumber] [part.p_partkey, partsupp.ps_partkey] → [part.p_type, lineitem.l_extendedprice, lineitem.l_discount]  $74 Graph(nodes: part, partsupp, lineitem, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey}>})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, part.p_partkey AS part_p_partkey, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_type AS part_p_type, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount FROM part JOIN partsupp JOIN lineitem WHERE partsupp.ps_partkey=part.p_partkey AND lineitem.l_suppkey=partsupp.ps_partkey
query time: 1.09709903 for i2511103335
== start inserting : i2511103335, 30006
insert through csv: i2511103335, /tmp/d20201111-19113-x49orq/i2511103335_0.csv, 30006
loading through csv time: 1.437820182 for 30006 records
 INFO  nose::loader::mysqlloader : i1763256478 [lineitem.l_linenumber] [partsupp.ps_partkey, part.p_partkey] → [part.p_name, lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $90 Graph(nodes: part, partsupp, lineitem, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey}>})
SELECT DISTINCT lineitem.l_linenumber AS lineitem_l_linenumber, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, part.p_name AS part_p_name, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, partsupp.ps_supplycost AS partsupp_ps_supplycost, lineitem.l_quantity AS lineitem_l_quantity FROM part JOIN partsupp JOIN lineitem WHERE partsupp.ps_partkey=part.p_partkey AND lineitem.l_suppkey=partsupp.ps_partkey
query time: 1.321572105 for i1763256478
== start inserting : i1763256478, 120020
insert through csv: i1763256478, /tmp/d20201111-19113-1wi2dyo/i1763256478_0.csv, 120020
loading through csv time: 4.10753117 for 120020 records
 INFO  nose::loader::mysqlloader : i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, part.p_size AS part_p_size, part.p_type AS part_p_type, partsupp.ps_supplycost AS partsupp_ps_supplycost, supplier.s_acctbal AS supplier_s_acctbal, nation.n_name AS nation_n_name, supplier.s_name AS supplier_s_name, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey, supplier.s_suppkey AS supplier_s_suppkey, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, part.p_mfgr AS part_p_mfgr, supplier.s_address AS supplier_s_address, supplier.s_phone AS supplier_s_phone, supplier.s_comment AS supplier_s_comment FROM part JOIN partsupp JOIN supplier JOIN nation JOIN region WHERE partsupp.ps_partkey=part.p_partkey AND partsupp.ps_suppkey=supplier.s_suppkey AND supplier.s_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.163808955 for i662047096
== start inserting : i662047096, 16000
insert through csv: i662047096, /tmp/d20201111-19113-1kwaico/i662047096_0.csv, 16000
loading through csv time: 1.881857485 for 16000 records
 INFO  nose::loader::mysqlloader : i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey, supplier.s_suppkey AS supplier_s_suppkey, partsupp.ps_partkey AS partsupp_ps_partkey, partsupp.ps_supplycost AS partsupp_ps_supplycost FROM partsupp JOIN supplier JOIN nation JOIN region WHERE partsupp.ps_suppkey=supplier.s_suppkey AND supplier.s_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 0.028759698 for i144261828
== start inserting : i144261828, 16000
insert through csv: i144261828, /tmp/d20201111-19113-3wxfg0/i144261828_0.csv, 16000
loading through csv time: 1.348035627 for 16000 records
 INFO  nose::loader::mysqlloader : i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>})
SELECT DISTINCT customer.c_mktsegment AS customer_c_mktsegment, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, orders.o_orderdate AS orders_o_orderdate, customer.c_custkey AS customer_c_custkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_linenumber AS lineitem_l_linenumber, orders.o_shippriority AS orders_o_shippriority, lineitem.l_shipdate AS lineitem_l_shipdate FROM lineitem JOIN orders JOIN customer WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey
query time: 1.084883573 for i1726533611
== start inserting : i1726533611, 586
insert through csv: i1726533611, /tmp/d20201111-19113-8bfqqz/i1726533611_0.csv, 586
loading through csv time: 0.796047349 for 586 records
 INFO  nose::loader::mysqlloader : i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, nation.n_name AS nation_n_name, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey FROM nation JOIN region WHERE nation.n_regionkey=region.r_regionkey
query time: 0.001113211 for i3435119087
== start inserting : i3435119087, 25
insert through csv: i3435119087, /tmp/d20201111-19113-1fa8xmy/i3435119087_0.csv, 25
loading through csv time: 0.729235911 for 25 records
 INFO  nose::loader::mysqlloader : i2634107645 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT nation.n_nationkey AS nation_n_nationkey, orders.o_orderdate AS orders_o_orderdate, lineitem.l_discount AS lineitem_l_discount, lineitem.l_extendedprice AS lineitem_l_extendedprice, customer.c_custkey AS customer_c_custkey, lineitem.l_linenumber AS lineitem_l_linenumber, orders.o_orderkey AS orders_o_orderkey FROM lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 0.614228774 for i2634107645
== start inserting : i2634107645, 586
insert through csv: i2634107645, /tmp/d20201111-19113-1t31s49/i2634107645_0.csv, 586
loading through csv time: 0.793329831 for 586 records
 INFO  nose::loader::mysqlloader : i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT nation.n_name AS nation_n_name, lineitem.l_shipdate AS lineitem_l_shipdate, nation.n_nationkey AS nation_n_nationkey, customer.c_custkey AS customer_c_custkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_linenumber AS lineitem_l_linenumber, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount FROM lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 0.45861062 for i1327449593
== start inserting : i1327449593, 586
insert through csv: i1327449593, /tmp/d20201111-19113-g1r2p3/i1327449593_0.csv, 586
loading through csv time: 0.806564415 for 586 records
 INFO  nose::loader::mysqlloader : i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>})
SELECT DISTINCT region.r_name AS region_r_name, nation.n_name AS nation_n_name, part.p_type AS part_p_type, orders.o_orderdate AS orders_o_orderdate, region.r_regionkey AS region_r_regionkey, nation.n_nationkey AS nation_n_nationkey, customer.c_custkey AS customer_c_custkey, orders.o_orderkey AS orders_o_orderkey, lineitem.l_linenumber AS lineitem_l_linenumber, partsupp.ps_partkey AS partsupp_ps_partkey, part.p_partkey AS part_p_partkey, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount FROM part JOIN partsupp JOIN lineitem JOIN orders JOIN customer JOIN nation JOIN region WHERE partsupp.ps_partkey=part.p_partkey AND lineitem.l_suppkey=partsupp.ps_partkey AND lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey AND nation.n_regionkey=region.r_regionkey
query time: 1.289690614 for i2386081023
== start inserting : i2386081023, 586
insert through csv: i2386081023, /tmp/d20201111-19113-1ehdiu7/i2386081023_0.csv, 586
loading through csv time: 0.849900607 for 586 records
 INFO  nose::loader::mysqlloader : i1400082724 [part.p_name] [orders.o_orderkey, nation.n_name, orders.o_orderdate, part.p_partkey, partsupp.ps_partkey, lineitem.l_linenumber, customer.c_custkey, nation.n_nationkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $156 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT part.p_name AS part_p_name, orders.o_orderkey AS orders_o_orderkey, nation.n_name AS nation_n_name, orders.o_orderdate AS orders_o_orderdate, part.p_partkey AS part_p_partkey, partsupp.ps_partkey AS partsupp_ps_partkey, lineitem.l_linenumber AS lineitem_l_linenumber, customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, partsupp.ps_supplycost AS partsupp_ps_supplycost, lineitem.l_quantity AS lineitem_l_quantity FROM part JOIN partsupp JOIN lineitem JOIN orders JOIN customer JOIN nation WHERE partsupp.ps_partkey=part.p_partkey AND lineitem.l_suppkey=partsupp.ps_partkey AND lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 0.957913072 for i1400082724
== start inserting : i1400082724, 2344
insert through csv: i1400082724, /tmp/d20201111-19113-18kt9yp/i1400082724_0.csv, 2344
loading through csv time: 0.825177498 for 2344 records
 INFO  nose::loader::mysqlloader : i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>})
SELECT DISTINCT lineitem.l_returnflag AS lineitem_l_returnflag, lineitem.l_extendedprice AS lineitem_l_extendedprice, lineitem.l_discount AS lineitem_l_discount, orders.o_orderdate AS orders_o_orderdate, lineitem.l_linenumber AS lineitem_l_linenumber, orders.o_orderkey AS orders_o_orderkey, customer.c_custkey AS customer_c_custkey, nation.n_nationkey AS nation_n_nationkey, customer.c_name AS customer_c_name, customer.c_acctbal AS customer_c_acctbal, nation.n_name AS nation_n_name, customer.c_address AS customer_c_address, customer.c_phone AS customer_c_phone, customer.c_comment AS customer_c_comment FROM lineitem JOIN orders JOIN customer JOIN nation WHERE lineitem.l_orderkey=orders.o_orderkey AND orders.o_custkey=customer.c_custkey AND customer.c_nationkey=nation.n_nationkey
query time: 0.602292493 for i1394347799
== start inserting : i1394347799, 586
insert through csv: i1394347799, /tmp/d20201111-19113-6f5vd1/i1394347799_0.csv, 586
loading through csv time: 0.85338004 for 586 records
whole loading time: 84.656576578
[33m timestep: 0 ===================================================== [0m
i2588666510 is created before query processing
i3670917302 is created before query processing
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
[36m migrate from: [0m
  Index lookup i1400082724 [part.p_name] [orders.o_orderkey, nation.n_name, orders.o_orderdate, part.p_partkey, partsupp.ps_partkey, lineitem.l_linenumber, customer.c_custkey, nation.n_nationkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $156 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2.0000300004500068e-05/1 
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])
[36m to: [0m
  Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 
  Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 
  Filter [orders.o_orderkey]  
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i2634107645 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
===== creating index: i2588666510 for the migration
collected data size for i2588666510 is 2344
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
== start inserting : i2588666510, 2344
insert through csv: i2588666510, /tmp/d20201111-22821-1b0ah3i/i2588666510_0.csv, 2344
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i1400082724 [part.p_name] [orders.o_orderkey, nation.n_name, orders.o_orderdate, part.p_partkey, partsupp.ps_partkey, lineitem.l_linenumber, customer.c_custkey, nation.n_nationkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $156 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2.0000300004500068e-05/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
loading through csv time: 0.833653671 for 2344 records
===== creation done: i2588666510 for the migration
===== creating index: i3670917302 for the migration
collected data size for i3670917302 is 2344
== start inserting : i3670917302, 2344
insert through csv: i3670917302, /tmp/d20201111-22821-ne6yig/i3670917302_0.csv, 2344
loading through csv time: 0.855377868 for 2344 records
===== creation done: i3670917302 for the migration
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 1 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i2634107645 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 2 ===================================================== [0m
i3399431750 is created before query processing
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
[36m migrate from: [0m
  Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])
[36m to: [0m
  Index lookup i3399431750 [nation.n_name] [nation.n_nationkey, partsupp.ps_partkey, region.r_name, region.r_regionkey, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey] → [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount]  $140 Graph(nodes: partsupp, lineitem, orders, customer, nation, region, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 48000.0/1 
  Filter [region.r_name] orders.o_orderdate 
  Index lookup i1570326625 [partsupp.ps_partkey] [part.p_type, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 64.0/960.0 
  Sort [orders.o_orderdate]
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])
===== creating index: i3399431750 for the migration
collected data size for i3399431750 is 616
== start inserting : i3399431750, 616
insert through csv: i3399431750, /tmp/d20201111-23295-srh7n9/i3399431750_0.csv, 616
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i2634107645 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i2386081023 [region.r_name] [nation.n_name, part.p_type, orders.o_orderdate, region.r_regionkey, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber, partsupp.ps_partkey, part.p_partkey] → [lineitem.l_extendedprice, lineitem.l_discount]  $166 Graph(nodes: part, partsupp, lineitem, orders, customer, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 32.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
loading through csv time: 0.837295377 for 616 records
===== creation done: i3399431750 for the migration
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 3 ===================================================== [0m
i2683188835 is created before query processing
i288069814 is created before query processing
i2309922801 is created before query processing
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 , Index lookup i2634107645 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i3399431750 [nation.n_name] [nation.n_nationkey, partsupp.ps_partkey, region.r_name, region.r_regionkey, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey] → [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount]  $140 Graph(nodes: partsupp, lineitem, orders, customer, nation, region, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 48000.0/1 , Filter [region.r_name] orders.o_orderdate , Index lookup i1570326625 [partsupp.ps_partkey] [part.p_type, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 64.0/960.0 , Sort [orders.o_orderdate], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
[36m migrate from: [0m
[36m migrate from: [0m
  Index lookup i3435119087 [region.r_name] [nation.n_name, region.r_regionkey, nation.n_nationkey] → []  $52 Graph(nodes: nation, region, edges: {nation=>#<Set: {nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 5.0/1 
  Index lookup i1726533611 [customer.c_mktsegment] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [orders.o_shippriority, lineitem.l_shipdate]  $98 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 1200000.0/1 
  Index lookup i2634107645 [nation.n_nationkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, customer.c_custkey, lineitem.l_linenumber, orders.o_orderkey] → []  $88 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 120000.0/5.0 
  Filter [] orders.o_orderdate 
  Sort [lineitem.l_extendedprice, lineitem.l_discount]
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])
[36m to: [0m
[36m to: [0m
  Index lookup i2683188835 [customer.c_mktsegment] [customer.c_custkey] → []  $26 Graph(nodes: customer, edges: {}) * 30000.0/1 
  Index lookup i2309922801 [region.r_name] [nation.n_name, region.r_regionkey, customer.c_custkey, nation.n_nationkey] → []  $68 Graph(nodes: customer, nation, region, edges: {customer=>#<Set: {customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 30000.0/1 
  Index lookup i288069814 [customer.c_custkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, lineitem.l_linenumber, orders.o_orderkey] → [orders.o_shippriority]  $80 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 120000.0/30000.0 
  Index lookup i288069814 [customer.c_custkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, lineitem.l_linenumber, orders.o_orderkey] → [orders.o_shippriority]  $80 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 120000.0/30000.0 
  Sort [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate]
  Sort [lineitem.l_extendedprice, lineitem.l_discount]
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])
  Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])
===== creating index: i2683188835 for the migration
===== creating index: i2309922801 for the migration
collected data size for i2683188835 is 623
collected data size for i2309922801 is 654
== start inserting : i2683188835, 623
== start inserting : i2309922801, 654
insert through csv: i2683188835, /tmp/d20201111-23525-145z4nt/i2683188835_0.csv, 623
insert through csv: i2309922801, /tmp/d20201111-23525-8rhtqf/i2309922801_0.csv, 654
loading through csv time: 0.798004028 for 623 records
===== creation done: i2683188835 for the migration
loading through csv time: 0.85428081 for 654 records
===== creation done: i2309922801 for the migration
===== creating index: i288069814 for the migration
collected data size for i288069814 is 623
== start inserting : i288069814, 623
===== creating index: i288069814 for the migration
collected data size for i288069814 is 623
== start inserting : i288069814, 623
insert through csv: i288069814, /tmp/d20201111-23525-1bhi6gs/i288069814_0.csv, 623
insert through csv: i288069814, /tmp/d20201111-23525-1ylesyj/i288069814_0.csv, 623
loading through csv time: 0.837557164 for 623 records
===== creation done: i288069814 for the migration
loading through csv time: 0.859164871 for 623 records
===== creation done: i288069814 for the migration
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
[33m timestep: 4 ===================================================== [0m
Executing Query: SELECT ps_suppkey.s_acctbal, ps_suppkey.s_name, s_nationkey.n_name, part.p_partkey, part.p_mfgr, ps_suppkey.s_address, ps_suppkey.s_phone, ps_suppkey.s_comment FROM part.from_partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE part.p_size = ? AND part.p_type = ? AND n_regionkey.r_name = ? AND from_partsupp.ps_supplycost = ? ORDER BY ps_suppkey.s_acctbal, s_nationkey.n_name, ps_suppkey.s_name -- Q2_outer
    Executing Plan: [Index lookup i662047096 [region.r_name] [part.p_size, part.p_type, partsupp.ps_supplycost, supplier.s_acctbal, nation.n_name, supplier.s_name, region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey] → [part.p_mfgr, supplier.s_address, supplier.s_phone, supplier.s_comment]  $184 Graph(nodes: part, partsupp, supplier, nation, region, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey, partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 0.0026702715332365366/1 ]
Executing Query: SELECT max(partsupp.ps_supplycost) FROM partsupp.ps_suppkey.s_nationkey.n_regionkey WHERE n_regionkey.r_name = ? -- Q2_inner
    Executing Plan: [Index lookup i144261828 [region.r_name] [region.r_regionkey, nation.n_nationkey, supplier.s_suppkey, partsupp.ps_partkey] → [partsupp.ps_supplycost]  $82 Graph(nodes: partsupp, supplier, nation, region, edges: {partsupp=>#<Set: {partsupp.ps_suppkey}>, supplier=>#<Set: {supplier.from_partsupp, supplier.s_nationkey}>, nation=>#<Set: {nation.from_supplier, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 160000.0/1 , Aggregation COUNT([]) SUM([]) AVG([]) MAX([partsupp.ps_supplycost]) GROUP BY([])]
Executing Query: SELECT l_orderkey.o_orderkey, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), l_orderkey.o_orderdate, l_orderkey.o_shippriority FROM lineitem.l_orderkey.o_custkey WHERE o_custkey.c_mktsegment = ? AND l_orderkey.o_orderdate < ? AND lineitem.l_shipdate > ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount, l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderkey, l_orderkey.o_orderdate, l_orderkey.o_shippriority -- Q3
    Executing Plan: [Index lookup i2683188835 [customer.c_mktsegment] [customer.c_custkey] → []  $26 Graph(nodes: customer, edges: {}) * 30000.0/1 , Index lookup i288069814 [customer.c_custkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, lineitem.l_linenumber, orders.o_orderkey] → [orders.o_shippriority]  $80 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 120000.0/30000.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderkey, orders.o_orderdate, orders.o_shippriority])]
Executing Query: SELECT c_nationkey.n_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE n_regionkey.r_name = ? AND l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY c_nationkey.n_name -- Q5
    Executing Plan: [Index lookup i2309922801 [region.r_name] [nation.n_name, region.r_regionkey, customer.c_custkey, nation.n_nationkey] → []  $68 Graph(nodes: customer, nation, region, edges: {customer=>#<Set: {customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 30000.0/1 , Index lookup i288069814 [customer.c_custkey] [orders.o_orderdate, lineitem.l_discount, lineitem.l_extendedprice, lineitem.l_linenumber, orders.o_orderkey] → [orders.o_shippriority]  $80 Graph(nodes: lineitem, orders, customer, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders}>}) * 120000.0/30000.0 , Sort [lineitem.l_extendedprice, lineitem.l_discount], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name])]
Executing Query: SELECT c_nationkey.n_name, lineitem.l_shipdate, sum(lineitem.l_extendedprice), sum(lineitem.l_discount) FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE c_nationkey.n_name = ? AND lineitem.l_shipdate < ? AND lineitem.l_shipdate > ? ORDER BY c_nationkey.n_name, lineitem.l_shipdate GROUP BY c_nationkey.n_name, lineitem.l_shipdate -- Q7
    Executing Plan: [Index lookup i1327449593 [nation.n_name] [lineitem.l_shipdate, nation.n_nationkey, customer.c_custkey, orders.o_orderkey, lineitem.l_linenumber] → [lineitem.l_extendedprice, lineitem.l_discount]  $98 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 24000.0/1 , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([nation.n_name, lineitem.l_shipdate])]
Executing Query: SELECT l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey.n_regionkey WHERE c_nationkey.n_name = ? AND n_regionkey.r_name = ? AND l_orderkey.o_orderdate < ? AND l_orderkey.o_orderdate > ? AND part.p_type = ? ORDER BY l_orderkey.o_orderdate GROUP BY l_orderkey.o_orderdate -- Q8
    Executing Plan: [Index lookup i3399431750 [nation.n_name] [nation.n_nationkey, partsupp.ps_partkey, region.r_name, region.r_regionkey, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey] → [orders.o_orderdate, lineitem.l_extendedprice, lineitem.l_discount]  $140 Graph(nodes: partsupp, lineitem, orders, customer, nation, region, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer, nation.n_regionkey}>, region=>#<Set: {region.from_nation}>}) * 48000.0/1 , Filter [region.r_name] orders.o_orderdate , Index lookup i1570326625 [partsupp.ps_partkey] [part.p_type, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 64.0/960.0 , Sort [orders.o_orderdate], Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([orders.o_orderdate])]
Executing Query: SELECT c_nationkey.n_name, l_orderkey.o_orderdate, sum(from_lineitem.l_extendedprice), sum(from_lineitem.l_discount), sum(from_partsupp.ps_supplycost), sum(from_lineitem.l_quantity) FROM part.from_partsupp.from_lineitem.l_orderkey.o_custkey.c_nationkey WHERE part.p_name = ? AND l_orderkey.o_orderkey = ? ORDER BY c_nationkey.n_name, l_orderkey.o_orderdate GROUP BY c_nationkey.n_name, l_orderkey.o_orderdate -- Q9
    Executing Plan: [Index lookup i2588666510 [part.p_name] [partsupp.ps_partkey, part.p_partkey] → []  $42 Graph(nodes: partsupp, part, edges: {part=>#<Set: {part.from_partsupp}>, partsupp=>#<Set: {partsupp.ps_partkey}>}) * 10.000150002250034/1 , Index lookup i3670917302 [partsupp.ps_partkey] [nation.n_name, orders.o_orderdate, customer.c_custkey, lineitem.l_linenumber, nation.n_nationkey, orders.o_orderkey] → [lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]  $130 Graph(nodes: partsupp, lineitem, orders, customer, nation, edges: {partsupp=>#<Set: {partsupp.from_lineitem}>, lineitem=>#<Set: {lineitem.l_suppkey, lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 0.0002000030000450007/10.000150002250034 , Filter [orders.o_orderkey]  , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity]) AVG([]) MAX([]) GROUP BY([nation.n_name, orders.o_orderdate])]
Executing Query: SELECT o_custkey.c_custkey, o_custkey.c_name, sum(lineitem.l_extendedprice), sum(lineitem.l_discount), o_custkey.c_acctbal, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_phone, o_custkey.c_comment FROM lineitem.l_orderkey.o_custkey.c_nationkey WHERE l_orderkey.o_orderdate >= ? AND l_orderkey.o_orderdate < ? AND lineitem.l_returnflag = ? ORDER BY lineitem.l_extendedprice, lineitem.l_discount GROUP BY o_custkey.c_custkey, o_custkey.c_name, o_custkey.c_acctbal, o_custkey.c_phone, c_nationkey.n_name, o_custkey.c_address, o_custkey.c_comment -- Q10
    Executing Plan: [Index lookup i1394347799 [lineitem.l_returnflag] [lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, lineitem.l_linenumber, orders.o_orderkey, customer.c_custkey, nation.n_nationkey] → [customer.c_name, customer.c_acctbal, nation.n_name, customer.c_address, customer.c_phone, customer.c_comment]  $156 Graph(nodes: lineitem, orders, customer, nation, edges: {lineitem=>#<Set: {lineitem.l_orderkey}>, orders=>#<Set: {orders.from_lineitem, orders.o_custkey}>, customer=>#<Set: {customer.from_orders, customer.c_nationkey}>, nation=>#<Set: {nation.from_customer}>}) * 2000000.0/1 , Filter [] orders.o_orderdate , Aggregation COUNT([]) SUM([lineitem.l_extendedprice, lineitem.l_discount]) AVG([]) MAX([]) GROUP BY([customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment])]
Executing INSERT INTO lineitem SET l_linenumber=?, l_quantity=?, l_extendedprice=?, l_discount=?, l_tax = ?, l_returnflag=?, l_linestatus=?, l_shipdate=?, l_commitdate=?, l_receiptdate=?, l_shipmode=?, l_comment=?, dummy=? AND CONNECT TO l_partkey(?), l_orderkey(?) -- lineitem_insert
Executing INSERT INTO orders SET o_orderkey=?, o_orderstatus=?, o_totalprice=?, o_orderdate=?, o_orderpriority=?, o_clerk=?, o_shippriority=?, o_comment=?, dummy=? AND CONNECT TO from_lineitem(?), o_custkey(?) -- orders_insert
cleanup
