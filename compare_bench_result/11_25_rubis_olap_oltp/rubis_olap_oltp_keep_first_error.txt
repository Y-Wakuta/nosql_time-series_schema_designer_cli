(eval):19: warning: constant ::FALSE is deprecated
(eval):45: warning: constant ::TRUE is deprecated
clearing keyspace: rubis
CREATE COLUMNFAMILY "i1888493477" ("items_id" uuid, "items_name" text, "items_description" text, "items_initial_price" float, "items_quantity" int, "items_reserve_price" float, "items_buy_now" float, "items_nb_of_bids" int, "items_max_bid" float, "items_start_date" timestamp, "items_end_date" timestamp, "value_hash" text, PRIMARY KEY(("items_id"), value_hash));
CREATE COLUMNFAMILY "i3264766123" ("items_id" uuid, "categories_id" uuid, "value_hash" text, PRIMARY KEY(("items_id"), "categories_id", value_hash));
CREATE COLUMNFAMILY "i578710568" ("items_id" uuid, "users_id" uuid, "value_hash" text, PRIMARY KEY(("items_id"), "users_id", value_hash));
CREATE COLUMNFAMILY "i2359173871" ("items_id" uuid, "buynow_id" uuid, "users_id" uuid, "buynow_date" timestamp, "value_hash" text, PRIMARY KEY(("items_id"), "buynow_id", "users_id", value_hash));
CREATE COLUMNFAMILY "i193173044" ("items_id" uuid, "bids_date" timestamp, "bids_id" uuid, "users_id" uuid, "users_nickname" text, "bids_qty" int, "bids_bid" float, "value_hash" text, PRIMARY KEY(("items_id"), "bids_date", "bids_id", "users_id", value_hash));
CREATE COLUMNFAMILY "i3563903410" ("items_id" uuid, "bids_bid" float, "bids_id" uuid, "bids_qty" int, "bids_date" timestamp, "value_hash" text, PRIMARY KEY(("items_id"), "bids_bid", "bids_id", value_hash));
CREATE COLUMNFAMILY "i2906147889" ("users_id" uuid, "users_firstname" text, "users_lastname" text, "users_nickname" text, "users_password" text, "users_email" text, "users_rating" int, "users_balance" float, "users_creation_date" timestamp, "value_hash" text, PRIMARY KEY(("users_id"), value_hash));
CREATE COLUMNFAMILY "i3722443462" ("categories_dummy" int, "categories_id" uuid, "categories_name" text, "value_hash" text, PRIMARY KEY(("categories_dummy"), "categories_id", value_hash));
CREATE COLUMNFAMILY "i1745777092" ("categories_id" uuid, "items_id" uuid, "items_end_date" timestamp, "value_hash" text, PRIMARY KEY(("categories_id"), "items_id", "items_end_date", value_hash));
CREATE COLUMNFAMILY "i3157175159" ("users_id" uuid, "comments_id" uuid, "comments_rating" int, "comments_date" timestamp, "comments_comment" text, "value_hash" text, PRIMARY KEY(("users_id"), "comments_id", value_hash));
CREATE COLUMNFAMILY "i302325151" ("regions_id" uuid, "users_id" uuid, "value_hash" text, PRIMARY KEY(("regions_id"), "users_id", value_hash));
CREATE COLUMNFAMILY "i4022021473" ("users_id" uuid, "categories_id" uuid, "items_id" uuid, "items_name" text, "items_initial_price" float, "items_max_bid" float, "items_nb_of_bids" int, "items_end_date" timestamp, "value_hash" text, PRIMARY KEY(("users_id"), "categories_id", "items_id", value_hash));
CREATE COLUMNFAMILY "i590232953" ("regions_dummy" int, "regions_id" uuid, "regions_name" text, "value_hash" text, PRIMARY KEY(("regions_dummy"), "regions_id", value_hash));
CREATE COLUMNFAMILY "i915430138" ("comments_id" uuid, "users_id" uuid, "users_nickname" text, "value_hash" text, PRIMARY KEY(("comments_id"), "users_id", value_hash));
CREATE COLUMNFAMILY "i2653317939" ("users_id" uuid, "buynow_date" timestamp, "buynow_id" uuid, "items_id" uuid, "buynow_qty" int, "items_name" text, "items_description" text, "items_initial_price" float, "items_quantity" int, "items_reserve_price" float, "items_buy_now" float, "items_nb_of_bids" int, "items_max_bid" float, "items_start_date" timestamp, "items_end_date" timestamp, "value_hash" text, PRIMARY KEY(("users_id"), "buynow_date", "buynow_id", "items_id", value_hash));
CREATE COLUMNFAMILY "i2771928428" ("users_id" uuid, "items_id" uuid, "items_name" text, "items_initial_price" float, "items_max_bid" float, "items_nb_of_bids" int, "items_end_date" timestamp, "value_hash" text, PRIMARY KEY(("users_id"), "items_id", value_hash));
CREATE COLUMNFAMILY "i1382515057" ("users_id" uuid, "bids_id" uuid, "items_id" uuid, "items_end_date" timestamp, "value_hash" text, PRIMARY KEY(("users_id"), "bids_id", "items_id", value_hash));
 INFO  nose::loader::mysqlloader : i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {})
SELECT DISTINCT items.id AS items_id, items.name AS items_name, items.description AS items_description, items.initial_price AS items_initial_price, items.quantity AS items_quantity, items.reserve_price AS items_reserve_price, items.buy_now AS items_buy_now, items.nb_of_bids AS items_nb_of_bids, items.max_bid AS items_max_bid, items.start_date AS items_start_date, items.end_date AS items_end_date FROM items
query time: 0.002500098 for i1888493477
== start inserting : i1888493477, 200000
insert through csv: i1888493477, /tmp/d20201125-20205-7u90sz/i1888493477_0.csv, 200000
loading through csv time: 6.632750568 for 200000 records
 INFO  nose::loader::mysqlloader : i3264766123 [items.id] [categories.id] → []  $32 Graph(nodes: items, categories, edges: {items=>#<Set: {items.category}>, categories=>#<Set: {categories.items}>})
SELECT DISTINCT items.id AS items_id, categories.id AS categories_id FROM items JOIN categories WHERE items.category=categories.id
query time: 0.31718697 for i3264766123
== start inserting : i3264766123, 200000
insert through csv: i3264766123, /tmp/d20201125-20205-z2y1tn/i3264766123_0.csv, 200000
loading through csv time: 3.731027993 for 200000 records
 INFO  nose::loader::mysqlloader : i578710568 [items.id] [users.id] → []  $32 Graph(nodes: users, items, edges: {items=>#<Set: {items.seller}>, users=>#<Set: {users.items_sold}>})
SELECT DISTINCT items.id AS items_id, users.id AS users_id FROM users JOIN items WHERE items.seller=users.id
query time: 0.439595272 for i578710568
== start inserting : i578710568, 200000
insert through csv: i578710568, /tmp/d20201125-20205-1cpff8w/i578710568_0.csv, 200000
loading through csv time: 3.666534767 for 200000 records
 INFO  nose::loader::mysqlloader : i2359173871 [items.id] [buynow.id, users.id] → [buynow.date]  $56 Graph(nodes: items, buynow, users, edges: {items=>#<Set: {items.bought_now}>, buynow=>#<Set: {buynow.item, buynow.buyer}>, users=>#<Set: {users.bought_now}>})
SELECT DISTINCT items.id AS items_id, buynow.id AS buynow_id, users.id AS users_id, buynow.date AS buynow_date FROM items JOIN buynow JOIN users WHERE buynow.item=items.id AND buynow.buyer=users.id
query time: 0.576914028 for i2359173871
== start inserting : i2359173871, 200000
insert through csv: i2359173871, /tmp/d20201125-20205-kbjc7l/i2359173871_0.csv, 200000
loading through csv time: 4.401769007 for 200000 records
 INFO  nose::loader::mysqlloader : i193173044 [items.id] [bids.date, bids.id, users.id] → [users.nickname, bids.qty, bids.bid]  $84 Graph(nodes: users, bids, items, edges: {users=>#<Set: {users.bids}>, bids=>#<Set: {bids.user, bids.item}>, items=>#<Set: {items.bids}>})
SELECT DISTINCT items.id AS items_id, bids.date AS bids_date, bids.id AS bids_id, users.id AS users_id, users.nickname AS users_nickname, bids.qty AS bids_qty, bids.bid AS bids_bid FROM users JOIN bids JOIN items WHERE bids.user=users.id AND bids.item=items.id
query time: 34.115028251 for i193173044
== start inserting : i193173044, 2000000
insert through csv: i193173044, /tmp/d20201125-20205-bj642t/i193173044_0.csv, 2000000
loading through csv time: 48.979370279 for 2000000 records
 INFO  nose::loader::mysqlloader : i3563903410 [items.id] [bids.bid, bids.id] → [bids.qty, bids.date]  $56 Graph(nodes: bids, items, edges: {bids=>#<Set: {bids.item}>, items=>#<Set: {items.bids}>})
SELECT DISTINCT items.id AS items_id, bids.bid AS bids_bid, bids.id AS bids_id, bids.qty AS bids_qty, bids.date AS bids_date FROM bids JOIN items WHERE bids.item=items.id
query time: 13.198808184 for i3563903410
== start inserting : i3563903410, 2000000
insert through csv: i3563903410, /tmp/d20201125-20205-9uc1vt/i3563903410_0.csv, 2000000
loading through csv time: 41.228098421 for 2000000 records
 INFO  nose::loader::mysqlloader : i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {})
SELECT DISTINCT users.id AS users_id, users.firstname AS users_firstname, users.lastname AS users_lastname, users.nickname AS users_nickname, users.password AS users_password, users.email AS users_email, users.rating AS users_rating, users.balance AS users_balance, users.creation_date AS users_creation_date FROM users
query time: 0.002395546 for i2906147889
== start inserting : i2906147889, 20000
insert through csv: i2906147889, /tmp/d20201125-20205-1o1pzyt/i2906147889_0.csv, 20000
loading through csv time: 1.738883368 for 20000 records
 INFO  nose::loader::mysqlloader : i3722443462 [categories.dummy] [categories.id] → [categories.name]  $44 Graph(nodes: categories, edges: {})
SELECT DISTINCT categories.dummy AS categories_dummy, categories.id AS categories_id, categories.name AS categories_name FROM categories
query time: 0.001261102 for i3722443462
== start inserting : i3722443462, 50
insert through csv: i3722443462, /tmp/d20201125-20205-u71w3f/i3722443462_0.csv, 50
loading through csv time: 0.790609597 for 50 records
 INFO  nose::loader::mysqlloader : i1745777092 [categories.id] [items.id, items.end_date] → []  $40 Graph(nodes: items, categories, edges: {items=>#<Set: {items.category}>, categories=>#<Set: {categories.items}>})
SELECT DISTINCT categories.id AS categories_id, items.id AS items_id, items.end_date AS items_end_date FROM items JOIN categories WHERE items.category=categories.id
query time: 0.491683606 for i1745777092
== start inserting : i1745777092, 200000
insert through csv: i1745777092, /tmp/d20201125-20205-zitmfv/i1745777092_0.csv, 200000
loading through csv time: 4.196451542 for 200000 records
 INFO  nose::loader::mysqlloader : i3157175159 [users.id] [comments.id] → [comments.rating, comments.date, comments.comment]  $178 Graph(nodes: comments, users, edges: {comments=>#<Set: {comments.to_user}>, users=>#<Set: {users.comments_received}>})
SELECT DISTINCT users.id AS users_id, comments.id AS comments_id, comments.rating AS comments_rating, comments.date AS comments_date, comments.comment AS comments_comment FROM comments JOIN users WHERE comments.to_user=users.id
query time: 10.225283128 for i3157175159
== start inserting : i3157175159, 1000000
insert through csv: i3157175159, /tmp/d20201125-20205-rejotf/i3157175159_0.csv, 1000000
loading through csv time: 22.119273446 for 1000000 records
 INFO  nose::loader::mysqlloader : i302325151 [regions.id] [users.id] → []  $32 Graph(nodes: users, regions, edges: {users=>#<Set: {users.region}>, regions=>#<Set: {regions.users}>})
SELECT DISTINCT regions.id AS regions_id, users.id AS users_id FROM users JOIN regions WHERE users.region=regions.id
query time: 0.040182353 for i302325151
== start inserting : i302325151, 20000
insert through csv: i302325151, /tmp/d20201125-20205-6cacyj/i302325151_0.csv, 20000
loading through csv time: 1.424221335 for 20000 records
 INFO  nose::loader::mysqlloader : i4022021473 [users.id] [categories.id, items.id] → [items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date]  $99 Graph(nodes: users, items, categories, edges: {items=>#<Set: {items.seller, items.category}>, users=>#<Set: {users.items_sold}>, categories=>#<Set: {categories.items}>})
SELECT DISTINCT users.id AS users_id, categories.id AS categories_id, items.id AS items_id, items.name AS items_name, items.initial_price AS items_initial_price, items.max_bid AS items_max_bid, items.nb_of_bids AS items_nb_of_bids, items.end_date AS items_end_date FROM users JOIN items JOIN categories WHERE items.seller=users.id AND items.category=categories.id
query time: 1.649083739 for i4022021473
== start inserting : i4022021473, 200000
insert through csv: i4022021473, /tmp/d20201125-20205-sodgy9/i4022021473_0.csv, 200000
loading through csv time: 5.750469283 for 200000 records
 INFO  nose::loader::mysqlloader : i590232953 [regions.dummy] [regions.id] → [regions.name]  $49 Graph(nodes: regions, edges: {})
SELECT DISTINCT regions.dummy AS regions_dummy, regions.id AS regions_id, regions.name AS regions_name FROM regions
query time: 0.00118986 for i590232953
== start inserting : i590232953, 5
insert through csv: i590232953, /tmp/d20201125-20205-1c6gjdk/i590232953_0.csv, 5
loading through csv time: 0.903541788 for 5 records
 INFO  nose::loader::mysqlloader : i915430138 [comments.id] [users.id] → [users.nickname]  $44 Graph(nodes: comments, users, edges: {comments=>#<Set: {comments.from_user}>, users=>#<Set: {users.comments_sent}>})
SELECT DISTINCT comments.id AS comments_id, users.id AS users_id, users.nickname AS users_nickname FROM comments JOIN users WHERE comments.from_user=users.id
query time: 4.296165332 for i915430138
== start inserting : i915430138, 1000000
insert through csv: i915430138, /tmp/d20201125-20205-12bmt8s/i915430138_0.csv, 1000000
loading through csv time: 17.329440368 for 1000000 records
 INFO  nose::loader::mysqlloader : i2653317939 [users.id] [buynow.date, buynow.id, items.id] → [buynow.qty, items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $344 Graph(nodes: items, buynow, users, edges: {items=>#<Set: {items.bought_now}>, buynow=>#<Set: {buynow.item, buynow.buyer}>, users=>#<Set: {users.bought_now}>})
SELECT DISTINCT users.id AS users_id, buynow.date AS buynow_date, buynow.id AS buynow_id, items.id AS items_id, buynow.qty AS buynow_qty, items.name AS items_name, items.description AS items_description, items.initial_price AS items_initial_price, items.quantity AS items_quantity, items.reserve_price AS items_reserve_price, items.buy_now AS items_buy_now, items.nb_of_bids AS items_nb_of_bids, items.max_bid AS items_max_bid, items.start_date AS items_start_date, items.end_date AS items_end_date FROM items JOIN buynow JOIN users WHERE buynow.item=items.id AND buynow.buyer=users.id
query time: 2.878347104 for i2653317939
== start inserting : i2653317939, 200000
insert through csv: i2653317939, /tmp/d20201125-20205-sarrhn/i2653317939_0.csv, 200000
loading through csv time: 8.879111783 for 200000 records
 INFO  nose::loader::mysqlloader : i2771928428 [users.id] [items.id] → [items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date]  $83 Graph(nodes: users, items, edges: {items=>#<Set: {items.seller}>, users=>#<Set: {users.items_sold}>})
SELECT DISTINCT users.id AS users_id, items.id AS items_id, items.name AS items_name, items.initial_price AS items_initial_price, items.max_bid AS items_max_bid, items.nb_of_bids AS items_nb_of_bids, items.end_date AS items_end_date FROM users JOIN items WHERE items.seller=users.id
query time: 1.276406791 for i2771928428
== start inserting : i2771928428, 200000
insert through csv: i2771928428, /tmp/d20201125-20205-1vz5njx/i2771928428_0.csv, 200000
loading through csv time: 5.455406726 for 200000 records
 INFO  nose::loader::mysqlloader : i1382515057 [users.id] [bids.id, items.id] → [items.end_date]  $56 Graph(nodes: items, bids, users, edges: {items=>#<Set: {items.bids}>, bids=>#<Set: {bids.item, bids.user}>, users=>#<Set: {users.bids}>})
SELECT DISTINCT users.id AS users_id, bids.id AS bids_id, items.id AS items_id, items.end_date AS items_end_date FROM items JOIN bids JOIN users WHERE bids.item=items.id AND bids.user=users.id
query time: 19.09380695 for i1382515057
== start inserting : i1382515057, 2000000
insert through csv: i1382515057, /tmp/d20201125-20205-16tq58o/i1382515057_0.csv, 2000000
loading through csv time: 41.388396352 for 2000000 records
whole loading time: 402.312387448
[33m timestep: 0 ===================================================== [0m
Executing Query: SELECT users.nickname, users.password FROM users WHERE users.id = ? -- 1
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT categories.id, categories.name FROM categories WHERE categories.dummy = 1 -- 2
    Executing Plan: [Index lookup i3722443462 [categories.dummy] [categories.id] → [categories.name]  $44 Graph(nodes: categories, edges: {}) * 5.0/1 ]
Executing Query: SELECT items.name FROM items WHERE items.id = ? -- 3
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.id, users.nickname, bids.id, item.id, bids.qty, bids.bid, bids.date FROM users.bids.item WHERE item.id = ? ORDER BY bids.date -- 4
    Executing Plan: [Index lookup i193173044 [items.id] [bids.date, bids.id, users.id] → [users.nickname, bids.qty, bids.bid]  $84 Graph(nodes: users, bids, items, edges: {users=>#<Set: {users.bids}>, bids=>#<Set: {bids.user, bids.item}>, items=>#<Set: {items.bids}>}) * 10.0/1 ]
Executing Query: SELECT items.* FROM items WHERE items.id = ? -- 5
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT bids.* FROM items.bids WHERE items.id = ? -- 6
    Executing Plan: [Index lookup i3563903410 [items.id] [bids.bid, bids.id] → [bids.qty, bids.date]  $56 Graph(nodes: bids, items, edges: {bids=>#<Set: {bids.item}>, items=>#<Set: {items.bids}>}) * 10.0/1 ]
Executing Query: SELECT items.id, items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date FROM items.category WHERE category.id = ? AND items.end_date >= ? LIMIT 25 -- 7
    Executing Plan: [Index lookup i1745777092 [categories.id] [items.id, items.end_date] → []  $40 Graph(nodes: items, categories, edges: {items=>#<Set: {items.category}>, categories=>#<Set: {categories.items}>}) * 25/1 , Filter [] items.end_date , Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 25/2.5 ]
Executing Query: SELECT users.* FROM users WHERE users.id = ? -- 8
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT comments.id, comments.rating, comments.date, comments.comment FROM comments.to_user WHERE to_user.id = ? -- 9
    Executing Plan: [Index lookup i3157175159 [users.id] [comments.id] → [comments.rating, comments.date, comments.comment]  $178 Graph(nodes: comments, users, edges: {comments=>#<Set: {comments.to_user}>, users=>#<Set: {users.comments_received}>}) * 50.0/1 ]
Executing Query: SELECT items.id, items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date FROM items.seller WHERE seller.region.id = ? AND items.category.id = ? AND items.end_date >= ? LIMIT 25 -- 35
    Executing Plan: [Index lookup i302325151 [regions.id] [users.id] → []  $32 Graph(nodes: users, regions, edges: {users=>#<Set: {users.region}>, regions=>#<Set: {regions.users}>}) * 400.0/1 , Index lookup i4022021473 [users.id] [categories.id, items.id] → [items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date]  $99 Graph(nodes: users, items, categories, edges: {items=>#<Set: {items.seller, items.category}>, users=>#<Set: {users.items_sold}>, categories=>#<Set: {categories.items}>}) * 80.0/400.0 , Filter [] items.end_date ]
Executing Query: SELECT regions.id, regions.name FROM regions WHERE regions.dummy = 1 -- 36
    Executing Plan: [Index lookup i590232953 [regions.dummy] [regions.id] → [regions.name]  $49 Graph(nodes: regions, edges: {}) * 0.5/1 ]
Executing Query: SELECT users.nickname FROM users WHERE users.id=? -- 12
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT items.* FROM items WHERE items.id=? -- 13
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT items.quantity, items.nb_of_bids, items.end_date FROM items WHERE items.id=? -- 14
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.nickname, users.password FROM users WHERE users.id=? -- 17
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT items.* FROM items WHERE items.id=? -- 18
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT bids.qty, bids.date FROM bids.item WHERE item.id=? ORDER BY bids.bid LIMIT 2 -- 19
    Executing Plan: [Index lookup i3563903410 [items.id] [bids.bid, bids.id] → [bids.qty, bids.date]  $56 Graph(nodes: bids, items, edges: {bids=>#<Set: {bids.item}>, items=>#<Set: {items.bids}>}) * 2/1 ]
Executing Query: SELECT items.nb_of_bids, items.max_bid FROM items WHERE items.id=? -- 21
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.nickname, users.password FROM users WHERE users.id=? -- 23
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT items.* FROM items WHERE items.id=? -- 24
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.* FROM users WHERE users.id=? -- 25
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.rating FROM users WHERE users.id=? -- 26
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.* FROM users WHERE users.id=? -- 29
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT comments_received.* FROM users.comments_received WHERE users.id = ? -- 30
    Executing Plan: [Index lookup i3157175159 [users.id] [comments.id] → [comments.rating, comments.date, comments.comment]  $178 Graph(nodes: comments, users, edges: {comments=>#<Set: {comments.to_user}>, users=>#<Set: {users.comments_received}>}) * 50.0/1 ]
Executing Query: SELECT from_user.nickname FROM comments.from_user WHERE comments.id = ? -- 31
    Executing Plan: [Index lookup i915430138 [comments.id] [users.id] → [users.nickname]  $44 Graph(nodes: comments, users, edges: {comments=>#<Set: {comments.from_user}>, users=>#<Set: {users.comments_sent}>}) * 1.0/1 ]
Executing Query: SELECT bought_now.*, items.* FROM items.bought_now.buyer WHERE buyer.id = ? AND bought_now.date>=? -- 32
    Executing Plan: [Index lookup i2653317939 [users.id] [buynow.date, buynow.id, items.id] → [buynow.qty, items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $344 Graph(nodes: items, buynow, users, edges: {items=>#<Set: {items.bought_now}>, buynow=>#<Set: {buynow.item, buynow.buyer}>, users=>#<Set: {users.bought_now}>}) * 2.0/1 ]
Executing Query: SELECT items.* FROM items.seller WHERE seller.id=? AND items.end_date >=? -- 33
    Executing Plan: [Index lookup i2771928428 [users.id] [items.id] → [items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date]  $83 Graph(nodes: users, items, edges: {items=>#<Set: {items.seller}>, users=>#<Set: {users.items_sold}>}) * 10.0/1 , Filter [] items.end_date , Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1.0 ]
Executing Query: SELECT items.* FROM items.bids.user WHERE user.id=? AND items.end_date>=? -- 34
    Executing Plan: [Index lookup i1382515057 [users.id] [bids.id, items.id] → [items.end_date]  $56 Graph(nodes: items, bids, users, edges: {items=>#<Set: {items.bids}>, bids=>#<Set: {bids.item, bids.user}>, users=>#<Set: {users.bids}>}) * 100.0/1 , Filter [] items.end_date , Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 10.0/10.0 ]
Executing INSERT INTO items SET id=?, name=?, description=?, initial_price=?, quantity=?, reserve_price=?, buy_now=?, nb_of_bids=0, max_bid=0, start_date=?, end_date=? AND CONNECT TO category(?), seller(?) -- 10
Executing INSERT INTO users SET id=?, firstname=?, lastname=?, nickname=?, password=?, email=?, rating=0, balance=0, creation_date=? AND CONNECT TO region(?) -- 11
Executing UPDATE items SET quantity=?, nb_of_bids=?, end_date=? WHERE items.id=? -- 15
Executing INSERT INTO buynow SET id=?, qty=?, date=? AND CONNECT TO item(?), buyer(?) -- 16
Executing INSERT INTO bids SET id=?, qty=?, bid=?, date=? AND CONNECT TO item(?), user(?) -- 20
Executing UPDATE items SET nb_of_bids=?, max_bid=? WHERE items.id=? -- 22
Executing UPDATE users SET rating=? WHERE users.id=? -- 27
Executing INSERT INTO comments SET id=?, rating=?, date=?, comment=? AND CONNECT TO to_user(?), from_user(?), item(?) -- 28
cleanup
[33m timestep: 1 ===================================================== [0m
Executing Query: SELECT users.nickname, users.password FROM users WHERE users.id = ? -- 1
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT categories.id, categories.name FROM categories WHERE categories.dummy = 1 -- 2
    Executing Plan: [Index lookup i3722443462 [categories.dummy] [categories.id] → [categories.name]  $44 Graph(nodes: categories, edges: {}) * 5.0/1 ]
Executing Query: SELECT items.name FROM items WHERE items.id = ? -- 3
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT users.id, users.nickname, bids.id, item.id, bids.qty, bids.bid, bids.date FROM users.bids.item WHERE item.id = ? ORDER BY bids.date -- 4
    Executing Plan: [Index lookup i193173044 [items.id] [bids.date, bids.id, users.id] → [users.nickname, bids.qty, bids.bid]  $84 Graph(nodes: users, bids, items, edges: {users=>#<Set: {users.bids}>, bids=>#<Set: {bids.user, bids.item}>, items=>#<Set: {items.bids}>}) * 10.0/1 ]
Executing Query: SELECT items.* FROM items WHERE items.id = ? -- 5
    Executing Plan: [Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 1.0/1 ]
Executing Query: SELECT bids.* FROM items.bids WHERE items.id = ? -- 6
    Executing Plan: [Index lookup i3563903410 [items.id] [bids.bid, bids.id] → [bids.qty, bids.date]  $56 Graph(nodes: bids, items, edges: {bids=>#<Set: {bids.item}>, items=>#<Set: {items.bids}>}) * 10.0/1 ]
Executing Query: SELECT items.id, items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date FROM items.category WHERE category.id = ? AND items.end_date >= ? LIMIT 25 -- 7
    Executing Plan: [Index lookup i1745777092 [categories.id] [items.id, items.end_date] → []  $40 Graph(nodes: items, categories, edges: {items=>#<Set: {items.category}>, categories=>#<Set: {categories.items}>}) * 25/1 , Filter [] items.end_date , Index lookup i1888493477 [items.id] [] → [items.name, items.description, items.initial_price, items.quantity, items.reserve_price, items.buy_now, items.nb_of_bids, items.max_bid, items.start_date, items.end_date]  $296 Graph(nodes: items, edges: {}) * 25/2.5 ]
Executing Query: SELECT users.* FROM users WHERE users.id = ? -- 8
    Executing Plan: [Index lookup i2906147889 [users.id] [] → [users.firstname, users.lastname, users.nickname, users.password, users.email, users.rating, users.balance, users.creation_date]  $103 Graph(nodes: users, edges: {}) * 1.0/1 ]
Executing Query: SELECT comments.id, comments.rating, comments.date, comments.comment FROM comments.to_user WHERE to_user.id = ? -- 9
    Executing Plan: [Index lookup i3157175159 [users.id] [comments.id] → [comments.rating, comments.date, comments.comment]  $178 Graph(nodes: comments, users, edges: {comments=>#<Set: {comments.to_user}>, users=>#<Set: {users.comments_received}>}) * 50.0/1 ]
Executing Query: SELECT items.id, items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date FROM items.seller WHERE seller.region.id = ? AND items.category.id = ? AND items.end_date >= ? LIMIT 25 -- 35
    Executing Plan: [Index lookup i302325151 [regions.id] [users.id] → []  $32 Graph(nodes: users, regions, edges: {users=>#<Set: {users.region}>, regions=>#<Set: {regions.users}>}) * 400.0/1 , Index lookup i4022021473 [users.id] [categories.id, items.id] → [items.name, items.initial_price, items.max_bid, items.nb_of_bids, items.end_date]  $99 Graph(nodes: users, items, categories, edges: {items=>#<Set: {items.seller, items.category}>, users=>#<Set: {users.items_sold}>, categories=>#<Set: {categories.items}>}) * 80.0/400.0 , Filter [] items.end_date ]
bundler: failed to load command: nose (/home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/bin/nose)
NameError: undefined method `>=' for class `NilClass'
Did you mean?  >
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:264:in `method'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:264:in `include_row?'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:249:in `block in process'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:249:in `select!'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:249:in `process'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:448:in `block in execute'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:441:in `each'
  /home/yusuke/Dropbox/nose-cli/td_NoSE/lib/nose/backend.rb:441:in `execute'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/execute.rb:172:in `block (2 levels) in bench_query'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/execute.rb:170:in `each'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/execute.rb:170:in `block in bench_query'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/execute.rb:165:in `upto'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/execute.rb:165:in `bench_query'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/td_benchmark.rb:102:in `block (2 levels) in td_benchmark'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/td_benchmark.rb:90:in `each'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/td_benchmark.rb:90:in `block in td_benchmark'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/td_benchmark.rb:64:in `each'
  /home/yusuke/Dropbox/nose-cli/lib/nose_cli/td_benchmark.rb:64:in `td_benchmark'
  /home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor/command.rb:27:in `run'
  /home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor/invocation.rb:126:in `invoke_command'
  /home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor.rb:369:in `dispatch'
  /home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/gems/thor-0.19.4/lib/thor/base.rb:444:in `start'
  /home/yusuke/Dropbox/nose-cli/bin/nose:19:in `<top (required)>'
  /home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/bin/nose:23:in `load'
  /home/yusuke/Dropbox/nose-cli/vendor/bundle/ruby/2.6.0/bin/nose:23:in `<top (required)>'
